# Generated by Django 5.1.4 on 2025-07-27 11:02

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.IntegerField()),
                ('email', models.EmailField(max_length=254)),
                ('whatsapp', models.CharField(max_length=1000)),
                ('address', models.CharField(max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='Rooms',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_number', models.IntegerField(default=1)),
                ('room_title', models.CharField(default='', max_length=1000)),
                ('available', models.BooleanField(default=True)),
                ('price', models.IntegerField(default=1)),
                ('bed', models.IntegerField(default=1)),
                ('tv', models.IntegerField(default=1)),
                ('storage', models.IntegerField(default=1)),
                ('bathroom', models.IntegerField(default=1)),
                ('balcony', models.IntegerField(default=1)),
                ('mirror', models.IntegerField()),
                ('fridge', models.IntegerField(default=1)),
                ('desk', models.IntegerField(default=1)),
                ('items', models.IntegerField(default=1)),
                ('kvadratuloba', models.IntegerField(default=1)),
                ('couche', models.IntegerField(default=1)),
                ('image1', models.ImageField(blank=True, default='', null=True, upload_to='pics/')),
                ('image2', models.ImageField(blank=True, default='', null=True, upload_to='pics/')),
                ('image3', models.ImageField(blank=True, default='', null=True, upload_to='pics/')),
                ('image4', models.ImageField(blank=True, default='', null=True, upload_to='pics/')),
                ('description', models.CharField(default='', max_length=2000)),
            ],
        ),
        migrations.CreateModel(
            name='Services',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_title', models.CharField(max_length=300)),
                ('service_description', models.CharField(max_length=800)),
                ('service_image', models.ImageField(upload_to='pics/')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('full_name', models.CharField(default='', max_length=150)),
                ('phone_number', models.IntegerField(default=0, max_length=150)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Check_In',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('persons', models.PositiveIntegerField(default=1)),
                ('reserved', models.BooleanField(default=True)),
                ('check_in', models.DateField(default=datetime.date.today)),
                ('check_out', models.DateField(default=datetime.date.today)),
                ('room', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, related_name='room', to='SunWineapp.rooms')),
                ('user', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, related_name='user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
